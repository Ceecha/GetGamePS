### 1. Mendownload (Clone) Repository:

git clone https://github.com/Ceecha/GetGamePS



### 2. Menambahkan dan Mengubah File:

- Tambah file yang diubah atau baru:

  git add nama_file

  Update semua perubahan

  git add .


- commit untuk menyimpan perubahan:

  git commit -m "Pesan commit singkat"

ex: git commit -m "nambah linked-list"


### 3. Mengambil Perubahan Terbaru (Pull):

git pull origin nama_branch

ganti `nama_branch` sama nama branch yang lagi dikerjain


### 4. Mengunggah Perubahan (Push):

- share perubahan

`git push`:


git push origin nama_branch


###  PENTING !!! :

- Selalu pastikan untuk melakukan pull sebelum memulai pekerjaan baru untuk memastikan bahwa Anda memiliki versi terbaru dari proyek.
- Selalu berkomunikasi dengan tim Anda dan pastikan untuk melakukan commit dengan pesan yang jelas agar tim dapat memahami perubahan yang Anda buat.
- Jangan lupa untuk membuat branch baru jika Anda bekerja pada fitur atau perbaikan tertentu.


## PENJELASAN BRANCH !!! :


### 1. **Fungsi Branch:**

- **Isolasi Pekerjaan:** Branch memungkinkan pengembang untuk bekerja pada fitur, perbaikan bug, atau tugas tertentu tanpa mempengaruhi kode di branch utama. Ini membantu mencegah konflik dan masalah integrasi.

- **Pengembangan Paralel:** Tim pengembang dapat bekerja secara paralel pada berbagai fitur atau perbaikan tanpa menghambat satu sama lain. Setiap branch memiliki salinan independen dari kode.

- **Uji Fitur:** Branch dapat digunakan untuk menguji fitur atau perubahan tanpa menggangu kode di branch utama. Jika fitur tersebut bekerja dengan baik, branch tersebut dapat diintegrasikan kembali ke branch utama.

### 2. **Contoh Penggunaan Branch:**

#### a. **Membuat Branch Baru:**

```bash
# Membuat branch baru
git branch nama_branch
```

#### b. **Pindah ke Branch Lain:**

```bash
# Pindah ke branch yang sudah ada
git checkout nama_branch
```

Atau dalam versi Git terbaru:

```bash
git switch nama_branch
```

#### c. **Membuat dan Pindah ke Branch Baru Secara Bersamaan:**

```bash
# Membuat dan pindah ke branch baru
git checkout -b nama_branch
```

Atau dengan perintah baru:

```bash
git switch -c nama_branch
```

#### d. **Melihat Daftar Branch:**

```bash
# Melihat daftar branch
git branch
```

#### e. **Menggabungkan Branch ke Branch Utama:**

Setelah selesai bekerja pada branch fitur, kita ingin menggabungkannya kembali ke branch utama.

```bash
# Pindah ke branch utama
git checkout main

# Menggabungkan branch fitur ke branch utama
git merge nama_branch
```

### 3. **Contoh Skenario:**

Misalkan kita bekerja pada proyek web dan ingin menambahkan fitur otentikasi baru. Langkah-langkahnya bisa terlihat seperti ini:

1. **Membuat Branch Fitur Ototentikasi:**
   
   ```bash
   git checkout -b fitur_otentikasi
   ```

2. **Mengimplementasikan Fitur Ototentikasi:**

   Pengembang menambahkan kode untuk fitur otentikasi di branch `fitur_otentikasi`.

3. **Pengujian dan Pembaruan:**

   Fitur otentikasi diuji secara lokal di branch tersebut. Jika semuanya berfungsi dengan baik, perubahan tersebut dapat di-*merge* ke branch utama.

4. **Menggabungkan ke Branch Utama:**

   ```bash
   git checkout main
   git merge fitur_otentikasi
   ```

5. **Pengujian Lanjutan di Branch Utama:**

   Setelah menggabungkan, pengembang dapat melakukan pengujian lanjutan di branch utama untuk memastikan bahwa tidak ada konflik atau masalah integrasi.

6. **Penyelesaian dan Penghapusan Branch:**

   Jika semuanya berjalan lancar, branch `fitur_otentikasi` bisa dihapus.

   ```
   git branch -d fitur_otentikasi
   ```
